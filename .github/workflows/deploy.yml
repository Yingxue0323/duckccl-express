name: Koala CCL Node.js CI/CD

on:
  push:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: self-hosted

    steps:
    - uses: actions/checkout@v3

    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm install

    - name: Build
      env:
        NODE_ENV: development
        PORT: 3000
        ADMIN_SECRET_KEY: ${{ secrets.ADMIN_SECRET_KEY }}
        WX_APPID: ${{ secrets.WX_APPID }}
        WX_SECRET: ${{ secrets.WX_SECRET }}
        WX_PUBLIC_KEY: ${{ secrets.WX_PUBLIC_KEY }}
        WX_PRIVATE_KEY: ${{ secrets.WX_PRIVATE_KEY }}
        WX_CERTIFICATE: ${{ secrets.WX_CERTIFICATE }}
        AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        S3_REGION: ${{ secrets.S3_REGION }}
        S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
        MONGODB_URI: ${{ secrets.MONGODB_URI }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        JWT_EXPIRES_IN: ${{ secrets.JWT_EXPIRES_IN }}
      run: |
        # 首次创建目录
        sudo mkdir -p /var/www/koala-ccl

        # 编译ts
        npm run build
        echo "编译完成，开始构建🏠..."

        # 只同步变化的文件
        sudo rsync -av --delete \
        --exclude=".git" \
        --exclude="node_modules" \
        --exclude="package-lock.json" \
        dist/ /var/www/koala-ccl/dist/
        
        sudo rsync -av src/public/ /var/www/koala-ccl/dist/public/
        sudo rsync -av package.json ecosystem.config.js tsconfig.json /var/www/koala-ccl/
        echo "同步完成，开始检查依赖更新🔍..."

        # 只在 package.json 变化时更新依赖
        if [ -f "/var/www/koala-ccl/package.json" ] && ! cmp -s package.json /var/www/koala-ccl/package.json; then
          cd /var/www/koala-ccl
          npm install  # 会自动生成新的 package-lock.json
        fi
        echo "依赖更新完成，开始创建.env文件🍃..."

        # 创建环境变量文件
        env | grep -E '^(NODE_ENV|PORT|MONGODB_URI|WX_|JWT_|ADMIN_|AWS_|S3_)' > /var/www/koala-ccl/.env
        echo ".env文件创建完成，开始设置权限🔒..."
        
        # 设置权限
        sudo chmod 600 /var/www/koala-ccl/.env
        sudo chmod -R 755 /var/www/koala-ccl/dist
        sudo chown -R www-data:www-data /var/www/koala-ccl/dist/public
        sudo chown -R ubuntu:ubuntu /var/www/logs
        sudo chmod 755 /var/www/logs
        echo "权限设置完成，开始检查配置文件和磁盘空间🔍 ..."

        # if pm2 list | grep -q "koala"; then
        #   pm2 reload koala --update-env
        # else
        #   pm2 start ecosystem.config.js
        # fi
        # pm2 save
        # echo "应用重启完成✅"

    - name: Pre-deploy checks
      run: |
        # 检查必要文件
        for file in dist/app.js ecosystem.config.js; do
          if [ ! -f "$file" ]; then
            echo "❌ Missing required file: $file"
            exit 1
          fi
        done

        # 检查磁盘空间
        if [ $(df -P /var/www | awk 'NR==2 {print $5}' | sed 's/%//') -gt 90 ]; then
          echo "❌ Disk space critical: $(df -P /var/www | awk 'NR==2 {print $5}' | sed 's/%//')%"
        fi

        # 检查内存使用
        free_mem=$(free | awk '/Mem:/ {print $4}')
        if [ $free_mem -lt 524288 ]; then  # 512MB in KB
          echo "⚠️ Low memory warning: $free_mem KB left"
        fi
        
        echo "检查配置文件完成，开始重启应用🔄..."
        
    - name: restart
      run: | 
        # 优雅停止现有应用
        if pm2 list | grep -q "koala"; then
          echo "🛑 正在停止现有应用..."
          pm2 stop koala
          pm2 delete koala
        fi

        # 启动新应用
        echo "🚀 正在启动应用..."
        pm2 start ecosystem.config.js

        # 等待应用启动并检查状态
        echo "⏳ 等待应用启动..."
        max_attempts=30
        attempt=1
        while [ $attempt -le $max_attempts ]; do
          if pm2 list | grep "koala" | grep "online" > /dev/null; then
            echo "✅ 应用成功启动!"
            break
          fi
          
          # 检查是否有错误状态
          if pm2 list | grep "koala" | grep "errored" > /dev/null; then
            echo "❌ 应用启动失败"
            pm2 logs koala --lines 50
            exit 1
          fi
          
          echo "⏳ 等待中... ($attempt/$max_attempts)"
          sleep 2
          attempt=$((attempt + 1))
        done

        # 检查是否超时
        if [ $attempt -gt $max_attempts ]; then
          echo "❌ 应用启动超时"
          pm2 logs koala --lines 50
          exit 1
        fi

        # 保存 PM2 配置
        echo "💾 保存 PM2 配置..."
        pm2 save

        echo "✅ 部署完成"